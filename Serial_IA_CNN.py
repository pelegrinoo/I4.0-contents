# Bibliotecas
import serial.tools.list_ports
import time
import json

# Lista as portas disponíveis
ports = serial.tools.list_ports.comports()
serialInst = serial.Serial()
portVar = ''

# Mostra portas disponíveis
portsList = []
for onePort in ports:
    portsList.append(str(onePort))
    print(str(onePort))

# Pede ao usuário para selecionar a porta e armazena na variável portVar
val = input("Selecione um dos PORTs disponíveis (APENAS O DIGITO!): ")
for x in range(len(portsList)):
    if portsList[x].startswith("COM" + str(val)):
        portVar = "COM" + str(val)
        print(f"\nSelecionado: {portVar}")

# Configura e abre a conexão
serialInst.baudrate = 9600
serialInst.port = portVar
serialInst.timeout = 2  # Importante para evitar travamentos
serialInst.open()

# Aguarda o Arduino reiniciar
time.sleep(2)

# Lê e descarta a primeira linha (ruído da Serial)
serialInst.readline()

# Matrizes com valores normalizados
matrizes = [
    [
        [0.5888889, 0.5222222, 0.6000000, 0.3611111, 0.4777778, 0.4222222, 0.4944444, 0.6277778],
        [0.5277778, 0.5888889, 0.4166667, 0.5000000, 0.3555556, 0.5722222, 0.4222222, 0.5333333],
        [0.4444444, 0.4555556, 0.3944444, 0.5722222, 0.5500000, 0.5388889, 0.5444444, 0.4666667],
        [0.3833333, 0.3777778, 0.4666667, 0.4555556, 0.5166667, 0.5111111, 0.5388889, 0.4222222],
        [0.4666667, 0.4500000, 0.4388889, 0.5500000, 0.4166667, 0.4500000, 0.5333333, 0.5166667],
        [0.4611111, 0.4111111, 0.4555556, 0.4055556, 0.4722222, 0.5666667, 0.6000000, 0.4055556],
        [0.5666667, 0.3277778, 0.4722222, 0.4444444, 0.4777778, 0.4944444, 0.4722222, 0.5166667],
        [0.4277778, 0.5666667, 0.5333333, 0.5666667, 0.3666667, 0.4166667, 0.2944444, 0.4833333]
    ],
    [
        [0.6081081, 0.6216216, 0.6351351, 0.6013514, 0.4527027, 0.6689189, 0.5675676, 0.6959459],
        [0.4729730, 0.6959459, 0.4864865, 0.5540541, 0.5135135, 0.5270270, 0.6351351, 0.4864865],
        [0.6621622, 0.4594595, 0.6621622, 0.4594595, 0.6756757, 0.5743243, 0.6824324, 0.3918919],
        [0.5000000, 0.5608108, 0.7297297, 0.6891892, 0.6689189, 0.6283784, 0.4797297, 0.6013514],
        [0.6418919, 0.7094595, 0.4594595, 0.5202703, 0.5270270, 0.6891892, 0.6824324, 0.5337838],
        [0.6554054, 0.5135135, 0.6689189, 0.6013514, 0.6891892, 0.4527027, 0.5945946, 0.6554054],
        [0.5743243, 0.6554054, 0.5540541, 0.5472973, 0.6013514, 0.7094595, 0.6959459, 0.5878378],
        [0.5472973, 0.5337838, 0.5608108, 0.6283784, 0.7837838, 0.5878378, 0.5675676, 0.5608108]
    ],
    [
        [0.5096154, 0.5673077, 0.4326923, 0.4423077, 0.3461538, 0.4903846, 0.5673077, 0.3750000],
        [0.4807692, 0.5096154, 0.5192308, 0.6826923, 0.5480769, 0.5769231, 0.3269231, 0.3750000],
        [0.6057692, 0.5480769, 0.7019231, 0.4711538, 0.5096154, 0.4615385, 0.3846154, 0.5480769],
        [0.5673077, 0.6442308, 0.5384615, 0.3942308, 0.3750000, 0.4615385, 0.6730769, 0.5000000],
        [0.5769231, 0.4615385, 0.4615385, 0.5192308, 0.6538462, 0.5000000, 0.5000000, 0.5384615],
        [0.5288462, 0.4230769, 0.4423077, 0.4903846, 0.5000000, 0.6153846, 0.5096154, 0.4326923],
        [0.4711538, 0.5865385, 0.6057692, 0.5192308, 0.4903846, 0.3846154, 0.6250000, 0.4326923],
        [0.5961538, 0.4903846, 0.5096154, 0.4615385, 0.4711538, 0.5288462, 0.4423077, 0.6730769]
    ],
    [
        [0.4444444, 0.4000000, 0.3555556, 0.4611111, 0.5666667, 0.5500000, 0.5555556, 0.4222222],
        [0.4944444, 0.5111111, 0.4888889, 0.4388889, 0.3888889, 0.4666667, 0.4444444, 0.5166667],
        [0.4666667, 0.4555556, 0.4777778, 0.5611111, 0.3888889, 0.3888889, 0.4722222, 0.4500000],
        [0.4777778, 0.4888889, 0.5944444, 0.3555556, 0.5444444, 0.3833333, 0.5166667, 0.4388889],
        [0.4722222, 0.4388889, 0.3777778, 0.5277778, 0.5166667, 0.6111111, 0.5222222, 0.4333333],
        [0.3666667, 0.4555556, 0.5000000, 0.4888889, 0.4222222, 0.5000000, 0.5277778, 0.4777778],
        [0.4611111, 0.4333333, 0.4388889, 0.4500000, 0.6388889, 0.4277778, 0.4444444, 0.3888889],
        [0.3444444, 0.6388889, 0.5888889, 0.5166667, 0.3444444, 0.5444444, 0.4277778, 0.5666667]
    ],
    [
        [0.6148649, 0.5405405, 0.6283784, 0.6418919, 0.5743243, 0.5810811, 0.6148649, 0.5810811],
        [0.5337838, 0.6283784, 0.4527027, 0.5067568, 0.5608108, 0.6756757, 0.5810811, 0.5810811],
        [0.5067568, 0.5067568, 0.5743243, 0.6554054, 0.6621622, 0.4256757, 0.4527027, 0.5202703],
        [0.5945946, 0.6148649, 0.6351351, 0.5675676, 0.5675676, 0.6418919, 0.5945946, 0.6351351],
        [0.5472973, 0.5743243, 0.5608108, 0.5878378, 0.5675676, 0.6148649, 0.6891892, 0.6891892],
        [0.6621622, 0.5270270, 0.7094595, 0.6148649, 0.7162162, 0.6418919, 0.6621622, 0.4932432],
        [0.5743243, 0.5878378, 0.7297297, 0.7094595, 0.7702703, 0.6959459, 0.3918919, 0.5135135],
        [0.5000000, 0.7094595, 0.6013514, 0.6554054, 0.5135135, 0.6554054, 0.5878378, 0.8716216]
    ],
    [
        [0.5096154, 0.5384615, 0.5288462, 0.5480769, 0.5673077, 0.5288462, 0.4326923, 0.4519231],
        [0.5000000, 0.5961538, 0.6730769, 0.4326923, 0.3750000, 0.4134615, 0.4038462, 0.7115385],
        [0.4615385, 0.5865385, 0.4711538, 0.4711538, 0.4615385, 0.5192308, 0.5673077, 0.5673077],
        [0.5576923, 0.4326923, 0.3653846, 0.6057692, 0.6634615, 0.6346154, 0.5288462, 0.3942308],
        [0.4038462, 0.4134615, 0.5096154, 0.6153846, 0.5384615, 0.4326923, 0.3076923, 0.4711538],
        [0.5192308, 0.6346154, 0.6250000, 0.5673077, 0.3461538, 0.4519231, 0.4903846, 0.6250000],
        [0.5576923, 0.5769231, 0.4807692, 0.3269231, 0.5480769, 0.5961538, 0.5480769, 0.4519231],
        [0.4038462, 0.4519231, 0.5384615, 0.5192308, 0.5288462, 0.4519231, 0.5192308, 0.4519231]
    ],
    [
        [0.5472973, 0.5202703, 0.6621622, 0.4797297, 0.6554054, 0.6554054, 0.6148649, 0.5337838],
        [0.5472973, 0.4932432, 0.4797297, 0.6283784, 0.5472973, 0.6148649, 0.5945946, 0.5675676],
        [0.5472973, 0.5743243, 0.6824324, 0.6891892, 0.5608108, 0.5202703, 0.4797297, 0.5743243],
        [0.6351351, 0.6486486, 0.6081081, 0.5743243, 0.6689189, 0.5810811, 0.6418919, 0.6351351],
        [0.5540541, 0.5202703, 0.6418919, 0.6013514, 0.6891892, 0.6013514, 0.5472973, 0.5540541],
        [0.6891892, 0.6081081, 0.6959459, 0.5270270, 0.5337838, 0.6013514, 0.7094595, 0.6418919],
        [0.5337838, 0.6689189, 0.6486486, 0.7094595, 0.6418919, 0.5743243, 0.5067568, 0.4594595],
        [0.6148649, 0.6148649, 0.5878378, 0.5608108, 0.5675676, 0.5743243, 0.7297297, 0.5608108]
    ],
    [
        [0.3611111, 0.4944444, 0.4944444, 0.5388889, 0.4444444, 0.4111111, 0.4055556, 0.3888889],
        [0.5611111, 0.5000000, 0.5666667, 0.3166667, 0.4444444, 0.4277778, 0.5388889, 0.5666667],
        [0.4777778, 0.3555556, 0.4722222, 0.4833333, 0.5111111, 0.5222222, 0.4888889, 0.5000000],
        [0.4222222, 0.4444444, 0.3944444, 0.4666667, 0.5611111, 0.4555556, 0.5000000, 0.4388889],
        [0.4111111, 0.4666667, 0.5666667, 0.5500000, 0.4166667, 0.4111111, 0.4055556, 0.4833333],
        [0.5555556, 0.5888889, 0.4111111, 0.4944444, 0.4611111, 0.5333333, 0.5222222, 0.4388889],
        [0.4111111, 0.4666667, 0.4944444, 0.5777778, 0.4666667, 0.3111111, 0.4722222, 0.3388889],
        [0.5555556, 0.5333333, 0.5166667, 0.4166667, 0.4166667, 0.5055556, 0.4833333, 0.6333333]
    ],
    [
        [0.4903846, 0.5096154, 0.6153846, 0.5576923, 0.4711538, 0.5480769, 0.4038462, 0.4807692],
        [0.4807692, 0.5673077, 0.4519231, 0.3269231, 0.4615385, 0.5480769, 0.7115385, 0.6057692],
        [0.5000000, 0.4038462, 0.3557692, 0.5865385, 0.5673077, 0.6153846, 0.4230769, 0.3461538],
        [0.4519231, 0.5192308, 0.6730769, 0.4711538, 0.5480769, 0.4903846, 0.5673077, 0.5288462],
        [0.4615385, 0.5288462, 0.4711538, 0.5192308, 0.5961538, 0.4903846, 0.5384615, 0.4326923],
        [0.5576923, 0.5000000, 0.4615385, 0.5000000, 0.5096154, 0.5192308, 0.4134615, 0.4615385],
        [0.4903846, 0.5384615, 0.5961538, 0.5961538, 0.4615385, 0.3942308, 0.4903846, 0.5192308],
        [0.5000000, 0.4326923, 0.4903846, 0.4615385, 0.6153846, 0.4903846, 0.4615385, 0.6153846]
    ],
    [
        [0.5096154, 0.4615385, 0.4807692, 0.5673077, 0.4134615, 0.4423077, 0.5096154, 0.5961538],
        [0.6153846, 0.4326923, 0.3653846, 0.4903846, 0.3846154, 0.7115385, 0.4711538, 0.4903846],
        [0.3846154, 0.4134615, 0.4807692, 0.6346154, 0.6442308, 0.5192308, 0.4903846, 0.4230769],
        [0.6346154, 0.5000000, 0.5576923, 0.5673077, 0.3942308, 0.4423077, 0.5576923, 0.4711538],
        [0.5096154, 0.5000000, 0.5096154, 0.4615385, 0.5288462, 0.5096154, 0.4326923, 0.4134615],
        [0.5480769, 0.6057692, 0.5192308, 0.4423077, 0.4038462, 0.5288462, 0.6442308, 0.4615385],
        [0.4711538, 0.4038462, 0.4807692, 0.5961538, 0.5576923, 0.5000000, 0.3846154, 0.5192308],
        [0.4134615, 0.5961538, 0.4615385, 0.5000000, 0.5288462, 0.5961538, 0.5576923, 0.4038462]
    ]
]

# Envio das matrizes e leitura das respostas
for i, matriz in enumerate(matrizes):

    print(f"\nEnviando matriz {i + 1}...")

    # Serializa a matriz para string JSON
    matriz_str = json.dumps(matriz)

    # Envia matriz e '\n' para indicar fim
    serialInst.write(matriz_str.encode())
    serialInst.write(b'\n')
    print("Matriz enviada.\n")
    time.sleep(5)

    # Lê até receber "FIM"
    while True:
        line = serialInst.readline().decode('utf-8', errors='ignore').strip()
        if line == "FIM":
            break
        print(line)

    time.sleep(5)

serialInst.close()

'''
    As matrizes da array enviada para o Serial possuem dados das respectivas classes:
    
    Matriz 01 - Classe 2 - Azul
    Matriz 02 - Classe 1 - Vermelho
    Matriz 03 - Classe 3 - Verde
    Matriz 04 - Classe 2 - Azul
    Matriz 05 - Classe 1 - Vermelho
    Matriz 06 - Classe 3 - Verde
    Matriz 07 - Classe 1 - Vermelho
    Matriz 08 - Classe 2 - Azul
    Matriz 09 - Classe 3 - Verde
    Matriz 10 - Classe 3 - Verde
    
'''